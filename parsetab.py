
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'A BINARY_LITERAL COMMENT D EQUALS ID LPAREN M RPAREN S WHITESPACE\n    program : program statement\n            | statement\n    \n    statement : ID EQUALS expression\n    \n    expression : expression A term\n               | expression S term \n               | term\n    \n    term : term M factor\n         | term D factor\n         | factor\n    \n    factor : LPAREN expression RPAREN\n           | BINARY_LITERAL\n           | ID \n    \n    statement : WHITESPACE\n              | COMMENT\n    '
    
_lr_action_items = {'ID':([0,1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,],[3,3,-2,-13,-14,-1,8,-12,-3,-6,-9,8,-11,8,8,8,8,-4,-5,-7,-8,-10,]),'WHITESPACE':([0,1,2,4,5,6,8,9,10,11,13,19,20,21,22,23,],[4,4,-2,-13,-14,-1,-12,-3,-6,-9,-11,-4,-5,-7,-8,-10,]),'COMMENT':([0,1,2,4,5,6,8,9,10,11,13,19,20,21,22,23,],[5,5,-2,-13,-14,-1,-12,-3,-6,-9,-11,-4,-5,-7,-8,-10,]),'$end':([1,2,4,5,6,8,9,10,11,13,19,20,21,22,23,],[0,-2,-13,-14,-1,-12,-3,-6,-9,-11,-4,-5,-7,-8,-10,]),'EQUALS':([3,],[7,]),'LPAREN':([7,12,14,15,16,17,],[12,12,12,12,12,12,]),'BINARY_LITERAL':([7,12,14,15,16,17,],[13,13,13,13,13,13,]),'M':([8,10,11,13,19,20,21,22,23,],[-12,16,-9,-11,16,16,-7,-8,-10,]),'D':([8,10,11,13,19,20,21,22,23,],[-12,17,-9,-11,17,17,-7,-8,-10,]),'A':([8,9,10,11,13,18,19,20,21,22,23,],[-12,14,-6,-9,-11,14,-4,-5,-7,-8,-10,]),'S':([8,9,10,11,13,18,19,20,21,22,23,],[-12,15,-6,-9,-11,15,-4,-5,-7,-8,-10,]),'RPAREN':([8,10,11,13,18,19,20,21,22,23,],[-12,-6,-9,-11,23,-4,-5,-7,-8,-10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,1,],[2,6,]),'expression':([7,12,],[9,18,]),'term':([7,12,14,15,],[10,10,19,20,]),'factor':([7,12,14,15,16,17,],[11,11,11,11,21,22,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program statement','program',2,'p_program','parse_bla.py',8),
  ('program -> statement','program',1,'p_program','parse_bla.py',9),
  ('statement -> ID EQUALS expression','statement',3,'p_statement','parse_bla.py',18),
  ('expression -> expression A term','expression',3,'p_expression','parse_bla.py',24),
  ('expression -> expression S term','expression',3,'p_expression','parse_bla.py',25),
  ('expression -> term','expression',1,'p_expression','parse_bla.py',26),
  ('term -> term M factor','term',3,'p_term','parse_bla.py',35),
  ('term -> term D factor','term',3,'p_term','parse_bla.py',36),
  ('term -> factor','term',1,'p_term','parse_bla.py',37),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parse_bla.py',46),
  ('factor -> BINARY_LITERAL','factor',1,'p_factor','parse_bla.py',47),
  ('factor -> ID','factor',1,'p_factor','parse_bla.py',48),
  ('statement -> WHITESPACE','statement',1,'p_ignore_whitespace_comment','parse_bla.py',57),
  ('statement -> COMMENT','statement',1,'p_ignore_whitespace_comment','parse_bla.py',58),
]
