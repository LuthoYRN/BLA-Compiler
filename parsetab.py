
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'A BINARY_LITERAL COMMENT D EQUALS ID LPAREN M RPAREN S WHITESPACE\n    program : statements\n    \n    statements : statements statement\n               | statement\n               |\n    \n    statement : ID EQUALS expression\n    \n    expression : expression A term\n               | expression S term \n               | term\n    \n    term : term M factor\n         | term D factor\n         | factor\n    \n    factor : LPAREN expression RPAREN\n           | BINARY_LITERAL\n           | ID \n    '
    
_lr_action_items = {'ID':([0,2,3,5,6,7,8,9,10,11,12,13,14,15,16,18,19,20,21,22,],[4,4,-3,-2,7,-14,-5,-8,-11,7,-13,7,7,7,7,-6,-7,-9,-10,-12,]),'$end':([0,1,2,3,5,7,8,9,10,12,18,19,20,21,22,],[-4,0,-1,-3,-2,-14,-5,-8,-11,-13,-6,-7,-9,-10,-12,]),'EQUALS':([4,],[6,]),'LPAREN':([6,11,13,14,15,16,],[11,11,11,11,11,11,]),'BINARY_LITERAL':([6,11,13,14,15,16,],[12,12,12,12,12,12,]),'M':([7,9,10,12,18,19,20,21,22,],[-14,15,-11,-13,15,15,-9,-10,-12,]),'D':([7,9,10,12,18,19,20,21,22,],[-14,16,-11,-13,16,16,-9,-10,-12,]),'A':([7,8,9,10,12,17,18,19,20,21,22,],[-14,13,-8,-11,-13,13,-6,-7,-9,-10,-12,]),'S':([7,8,9,10,12,17,18,19,20,21,22,],[-14,14,-8,-11,-13,14,-6,-7,-9,-10,-12,]),'RPAREN':([7,9,10,12,17,18,19,20,21,22,],[-14,-8,-11,-13,22,-6,-7,-9,-10,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,],[2,]),'statement':([0,2,],[3,5,]),'expression':([6,11,],[8,17,]),'term':([6,11,13,14,],[9,9,18,19,]),'factor':([6,11,13,14,15,16,],[10,10,10,10,20,21,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parse_bla.py',17),
  ('statements -> statements statement','statements',2,'p_statements','parse_bla.py',23),
  ('statements -> statement','statements',1,'p_statements','parse_bla.py',24),
  ('statements -> <empty>','statements',0,'p_statements','parse_bla.py',25),
  ('statement -> ID EQUALS expression','statement',3,'p_statement','parse_bla.py',36),
  ('expression -> expression A term','expression',3,'p_expression','parse_bla.py',42),
  ('expression -> expression S term','expression',3,'p_expression','parse_bla.py',43),
  ('expression -> term','expression',1,'p_expression','parse_bla.py',44),
  ('term -> term M factor','term',3,'p_term','parse_bla.py',53),
  ('term -> term D factor','term',3,'p_term','parse_bla.py',54),
  ('term -> factor','term',1,'p_term','parse_bla.py',55),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parse_bla.py',64),
  ('factor -> BINARY_LITERAL','factor',1,'p_factor','parse_bla.py',65),
  ('factor -> ID','factor',1,'p_factor','parse_bla.py',66),
]
